// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sls.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Sls.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SlsRoot

@implementation SlsRoot

@end

#pragma mark - SlsRoot_FileDescriptor

static GPBFileDescriptor *SlsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Log

@implementation Log

@dynamic hasTime, time;
@dynamic contentsArray, contentsArray_Count;

typedef struct Log__storage_ {
  uint32_t _has_storage_[1];
  uint32_t time;
  NSMutableArray *contentsArray;
} Log__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = Log_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Log__storage_, time),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Log_Content),
        .number = Log_FieldNumber_ContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Log__storage_, contentsArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Log class]
                                     rootClass:[SlsRoot class]
                                          file:SlsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Log__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001D\000\002\000Contents\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Log_Content

@implementation Log_Content

@dynamic hasKey, key;
@dynamic hasValue, value;

typedef struct Log_Content__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} Log_Content__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = Log_Content_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Log_Content__storage_, key),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = Log_Content_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Log_Content__storage_, value),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Log_Content class]
                                     rootClass:[SlsRoot class]
                                          file:SlsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Log_Content__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001C\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogTag

@implementation LogTag

@dynamic hasKey, key;
@dynamic hasValue, value;

typedef struct LogTag__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} LogTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = LogTag_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LogTag__storage_, key),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = LogTag_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LogTag__storage_, value),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogTag class]
                                     rootClass:[SlsRoot class]
                                          file:SlsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogTag__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001C\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogGroup

@implementation LogGroup

@dynamic logsArray, logsArray_Count;
@dynamic hasReserved, reserved;
@dynamic hasTopic, topic;
@dynamic hasSource, source;
@dynamic logTagsArray, logTagsArray_Count;

typedef struct LogGroup__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logsArray;
  NSString *reserved;
  NSString *topic;
  NSString *source;
  NSMutableArray *logTagsArray;
} LogGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Log),
        .number = LogGroup_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LogGroup__storage_, logsArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reserved",
        .dataTypeSpecific.className = NULL,
        .number = LogGroup_FieldNumber_Reserved,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LogGroup__storage_, reserved),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = NULL,
        .number = LogGroup_FieldNumber_Topic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LogGroup__storage_, topic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = LogGroup_FieldNumber_Source,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LogGroup__storage_, source),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logTagsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LogTag),
        .number = LogGroup_FieldNumber_LogTagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LogGroup__storage_, logTagsArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogGroup class]
                                     rootClass:[SlsRoot class]
                                          file:SlsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogGroup__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\000Logs\000\002H\000\003E\000\004F\000\006\000LogTags\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogGroupList

@implementation LogGroupList

@dynamic logGroupListArray, logGroupListArray_Count;

typedef struct LogGroupList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logGroupListArray;
} LogGroupList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logGroupListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LogGroup),
        .number = LogGroupList_FieldNumber_LogGroupListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LogGroupList__storage_, logGroupListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogGroupList class]
                                     rootClass:[SlsRoot class]
                                          file:SlsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogGroupList__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000logGroupList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
